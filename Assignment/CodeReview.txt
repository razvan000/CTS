	Review
	
	Formatting
- The code is not formatted
- Inconsistency with naming conventions. Use lower camelcase
- Define each variable on a single line

	Meaningful names
- Methods should be named appropriately in order to give a glimpse on what they do. -> rename "calculate" and "setValue".
- Variables and parameter should have meaningful names: rename "value" to "loanValue" and "rate" to "interestPercentRate"

	Functions
- Validate all inputs
- KISS - the method "calculate" does 2 things. create a method for calculating interest
- Methods should do one thing -> create separate methods for printing only the loanValue and the interestRate and out-source them into the AccountPrinter Class.

	Classes
- The class account does not have single responsibility-> create a printer class and a fees calculator one.
- Make attributes private and provide getters.
- Use Interfaces for mandatory methods.

	Comments
- Don t use comments to explain code.

	Exceptions
- Define exceptions that are suited for your need. -> create InvalidLoanValueException class.

	Enums and Annotations
- Use an enumeration for the static attributes (STANDARD, BUDGET, PREMIUM, SUPER_PREMIUM)

	General
- Remove magic numbers (365, 0.125)
- Don't define variable unless you really have to use them ('vb' at line 37)
- YAGNI - there is no need to use an additional account object at line 44.









Category: Exceptions, Classes, Formatting, Comments, Functions, Meaningful names

